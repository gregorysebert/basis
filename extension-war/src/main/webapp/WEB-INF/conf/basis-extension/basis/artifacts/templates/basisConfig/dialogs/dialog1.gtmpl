<%
	import java.text.SimpleDateFormat;
	import java.util.Calendar;
	import org.exoplatform.webui.form.UIFormSelectBox;
	import org.exoplatform.webui.form.UIFormStringInput;
	import org.exoplatform.webui.core.model.SelectItemOption;
	import basis.selector.service.BasisSelectorService;
	import javax.jcr.Node;
	def rcontext = _ctx.getRequestContext() ;
	rcontext.getJavascriptManager().importJavascript('eXo.webui.UIHorizontalTabs');
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    String todayS=sdf.format(new Date());
	private String getTimestampName() {
		   Calendar now = Calendar.getInstance();
		   SimpleDateFormat formatter = new SimpleDateFormat("yyyy.MM.dd '-' hh'h'mm'm'ss");
		   return formatter.format(now.getTime());
	}
	String timestampName = getTimestampName();
	Node currentNode = uicomponent.getCurrentNode();
%>
<% uicomponent.addInterceptor("ecm-explorer/interceptor/CreateFolderTreeInterceptor.groovy", "post");%>

<style type="text/css">
    .Search16x16Icon {
        background: url('/ecmexplorer/skin/webui/component/explorer/../../../icons/16x16/DefaultSkin/SearchPage.gif') no-repeat left center;
        width: 16px;
        height: 16px;
    }
</style>

<script type="text/javascript">	
	function saveRNN(source,destination)
	{
		var inputFolderRNN = document.getElementById(source);
		var folderRNN = document.getElementById(destination);
		if((inputFolderRNN != null)&&(folderRNN!=null)){
			folderRNN.value=inputFolderRNN.value;
		}
	}

	function checkFieldRNN(source,destination,link)
	{
		var field = document.getElementById(source);
		saveRNN(source,destination);
		if((field!= null)&&(field.value!='')){
            var str2 = field.value.replace(/[^0-9]/g, "");
            if(97-((parseInt(str2.substring(0, str2.length-2), 10) % 97)) != (parseInt(str2.substring(str2.length-2, str2.length), 10))){
                field.focus();
                alert('RNN is not Valid!');
            }
            else
            {
                if (str2.length == 11){
                    field.value = str2.substring(0, 2) + '.' + str2.substring(2, 4) + '.' + str2.substring(4, 6) + '-' + str2.substring(6, 9) + '.' + str2.substring(9, 11);
                    saveRNN(source,destination);
					eval(link);
                }
                else{
                    field.focus();
                    alert('RNN is not Valid!');
                }
            }
		}
		else {
		eval(link);
		}
	}
</script>
	
<%/*Begin UITabPane*/%>
<div class="UITabPane">
<%/*Begin TabPaneContent*/%>
<div class="TabPaneContent"> 
<%/*Begin WorkingArea*/%>
<div class="WorkingAreaWithHelp">
	<%/*Begin Tabs*/%>
		  <div class="UIHorizontalTabs" style="margin-top:5px;">
			<div class="LeftHorizontalTabs">
				<div class="RightHorizontalTabs">
					<div class="CenterHorizontalTabs">
						<div class="TabsContainer">
							<div class="UITab NormalTabStyle">
							  <div class="SelectedTab">
								<div class="LeftTab">
								  <div class="RightTab">                
									<div class="MiddleTab" id="Tab1" onClick="tempSelectedTab='Tab1';eXo.webui.UIHorizontalTabs.displayTabContent(this);"><%=_ctx.appRes("basisFolder.label")%></div>
								  </div>
								</div>
							  </div>
							</div>
							<div class="UITab NormalTabStyle">
							  <div class="NormalTab">
								<div class="LeftTab">
								  <div class="RightTab">                
									<div class="MiddleTab" id="Tab2" onClick="tempSelectedTab='Tab2';eXo.webui.UIHorizontalTabs.displayTabContent(this);"><%=_ctx.appRes("basisDocument.label")%></div>
								  </div>
								</div>
							  </div>
							</div>       			
							<div class="UITab NormalTabStyle">
							  <div class="NormalTab">
								<div class="LeftTab">
								  <div class="RightTab">                
									<div class="MiddleTab" id="Tab3" onClick="tempSelectedTab='Tab3';eXo.webui.UIHorizontalTabs.displayTabContent(this);"><%=_ctx.appRes("basisFollow.label")%></div>
								  </div>
								</div>
							  </div>
							</div>  
						</div>
					  </div>
					</div>
				</div>
			</div>
<script>
	if(tempSelectedTab) 
	{
		var selectedTab = document.getElementById(tempSelectedTab);
		eXo.webui.UIHorizontalTabs.displayTabContent(selectedTab);
	}
</script>
<%/*End UIHorizontalTabs*/%>
<%/*Start UITabContentContainer*/%>
<% uiform.begin() %> 
<div class="HorizontalLayout">	  
	<div class="UITabContentContainer">
		<div class="UITabContent" style="display: block;" >
			<table class="UIFormGrid">
			    <tr style="display:none;">
		          <td class="FieldComponent">
		            $timestampName 
		               <div style="display:none;"><%
		              String[] configNameField = ["jcrPath=/node", "editable=if-null", timestampName] ;
		              uicomponent.addTextField("name", configNameField) ;
		            %></div>
		          </td>
        		</tr>
			    <tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisFolder.label.folderLanguage")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] folderLanguageField = ["jcrPath=/node/basis:folderLanguage", "options=NL,FR,EN", "onchange=true"];
				        uicomponent.addSelectBoxField("folderLanguage", folderLanguageField);
				        UIFormSelectBox folderLanguageSelectBox = uicomponent.findComponentById("folderLanguage");
				        String language = folderLanguageSelectBox.getValue();
				        // basis folder
				        BasisSelectorService basisSelectorService = new BasisSelectorService(currentNode.getNode("folderSelector.txt"), "Status", language);
			            String statusOptions = basisSelectorService.getOptions();
			            UIFormSelectBox folderStatusSelectBox = uicomponent.findComponentById("folderStatus");
			            if(folderStatusSelectBox != null) {
				            List<SelectItemOption<String>> optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] statusOptionsList = statusOptions.split(',');
			                for(String statusOption:statusOptionsList){
			                    optionsList.add(new SelectItemOption<String>(statusOption,statusOption));
			                }    
			            	folderStatusSelectBox.setOptions(optionsList);
			            }
			            // basis document
			            Node documentSelectorNode = currentNode.getNode("documentSelector.txt");
			            basisSelectorService = new BasisSelectorService(documentSelectorNode, "Type", language);
			            String typeOptions = basisSelectorService.getOptions();
			            UIFormSelectBox docTypeSelectBox = uicomponent.findComponentById("docType");
			            if(docTypeSelectBox != null) {
				            optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] typeOptionsList = typeOptions.split(',');
			                for(String typeOption:typeOptionsList){
			                    optionsList.add(new SelectItemOption<String>(typeOption,typeOption));
			                }    
			                docTypeSelectBox.setOptions(optionsList);
			            }
			            basisSelectorService = new BasisSelectorService(documentSelectorNode, "Keywords", language);
			            String keywordsOptions = basisSelectorService.getOptions();
			            UIFormSelectBox docKeywordsSelectBox = uicomponent.findComponentById("docKeywords");
			            if(docKeywordsSelectBox != null) {
				            optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] keywordsOptionsList = keywordsOptions.split(',');
			                for(String keywordsOption:keywordsOptionsList){
			                    optionsList.add(new SelectItemOption<String>(keywordsOption,keywordsOption));
			                }    
			                docKeywordsSelectBox.setOptions(optionsList);
			            }
			            basisSelectorService = new BasisSelectorService(documentSelectorNode, "PredefinedExternSender", language);
			            String predefinedExternSenderOptions = basisSelectorService.getOptions();
			            UIFormSelectBox docPredefinedExternSenderSelectBox = uicomponent.findComponentById("docPredefinedExternSender");
			            if(docPredefinedExternSenderSelectBox != null) {
				            optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] predefinedExternSenderOptionsList = predefinedExternSenderOptions.split(',');
			                for(String predefinedExternSenderOption:predefinedExternSenderOptionsList){
			                    optionsList.add(new SelectItemOption<String>(predefinedExternSenderOption,predefinedExternSenderOption));
			                }    
			                docPredefinedExternSenderSelectBox.setOptions(optionsList);
			            }
			         	// basis follow
			            Node followSelectorNode = currentNode.getNode("followSelector.txt");
			            basisSelectorService = new BasisSelectorService(followSelectorNode, "GroupInternEditor", language);
			            String groupInternEditorOptions = basisSelectorService.getOptions();
			            UIFormSelectBox followGroupInternEditorSelectBox = uicomponent.findComponentById("followGroupInternEditor");
			            if(followGroupInternEditorSelectBox != null) {
				            optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] groupInternEditorOptionsList = groupInternEditorOptions.split(',');
			                for(String groupInternEditorOption:groupInternEditorOptionsList){
			                    optionsList.add(new SelectItemOption<String>(groupInternEditorOption,groupInternEditorOption));
			                }    
			                followGroupInternEditorSelectBox.setOptions(optionsList);
			            }
			            basisSelectorService = new BasisSelectorService(followSelectorNode, "ExternEditor", language);
			            String externEditorOptions = basisSelectorService.getOptions();
			            UIFormSelectBox followExternEditorSelectBox = uicomponent.findComponentById("followExternEditor");
			            if(followExternEditorSelectBox != null) {
				            optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] externEditorOptionsList = externEditorOptions.split(',');
			                for(String externEditorOption:externEditorOptionsList){
			                    optionsList.add(new SelectItemOption<String>(externEditorOption,externEditorOption));
			                }    
			                followExternEditorSelectBox.setOptions(optionsList);
			            }
			            basisSelectorService = new BasisSelectorService(followSelectorNode, "RequiredAction", language);
			            String requiredActionOptions = basisSelectorService.getOptions();
			            UIFormSelectBox followRequiredActionSelectBox = uicomponent.findComponentById("followRequiredAction");
			            if(followRequiredActionSelectBox != null) {
				            optionsList = new ArrayList<SelectItemOption<String>>();
				            String[] requiredActionOptionsList = requiredActionOptions.split(',');
			                for(String requiredActionOption:requiredActionOptionsList){
			                    optionsList.add(new SelectItemOption<String>(requiredActionOption,requiredActionOption));
			                }    
			                followRequiredActionSelectBox.setOptions(optionsList);
			            }
				        %>
				    </td>
				</tr>
				<tr style="display:none;">
					<td class="FieldLabel"><%=_ctx.appRes("basisFolder.label.folderRegistrationDate")%></td>
					<td class="FieldComponent">
						<%
						String[] folderRegistrationDateField = ["jcrPath=/node/basis:folderRegistrationDate", ("defaultValues="+todayS)];
						uicomponent.addCalendarField("folderRegistrationDate", folderRegistrationDateField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisFolder.label.folderCloseBeforeDate")%></td>
					<td class="FieldComponent">
						<%
						String[] folderCloseBeforeDateField = ["jcrPath=/node/basis:folderCloseBeforeDate", "visible=true", "validate=datetime", ("defaultValues="+todayS)];
						uicomponent.addCalendarField("folderCloseBeforeDate", folderCloseBeforeDateField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisFolder.label.folderRNN")%></td>
					<td class="FieldComponent">
					    <div style="display:none;">
							<%
							String[] folderRNNField = ["jcrPath=/node/basis:folderRNN"];
							uicomponent.addTextField("folderRNN", folderRNNField);
							%>
						</div>
						<%
						UIFormStringInput folderRNNFieldStringInput = uicomponent.findComponentById("folderRNN");
						String folderRNNVal ="''"; 
						if (folderRNNFieldStringInput.getValue()!=null)
						{
						folderRNNVal = folderRNNFieldStringInput.getValue(); 
						}
						%>
						<input id="inputfolderRNN" type="text" name="inputfolderRNN"  value=<%=folderRNNVal%> onchange="javascript:checkFieldRNN('inputfolderRNN','folderRNN','')">
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisFolder.label.folderExternalReference")%></td>
					<td class="FieldComponent">
						<%
						String[] folderExternalReferenceField = ["jcrPath=/node/basis:folderExternalReference"];
						uicomponent.addTextField("folderExternalReference", folderExternalReferenceField);
						%>
					</td>
				</tr>
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisFolder.label.folderStatus")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] folderStatusField = ["jcrPath=/node/basis:folderStatus", "options="+statusOptions, "onchange=false"];
				        uicomponent.addSelectBoxField("folderStatus", folderStatusField);
				        %>
				    </td>
				</tr>
			</table>
		</div> 
					
		<div class="UITabContent" style="display: none;" >
			<table class="UIFormGrid">	
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docInOut")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] docInOutField = ["jcrPath=/node/basis:docInOut", "options=In,Out", "onchange=false"];
				        uicomponent.addSelectBoxField("docInOut", docInOutField);
				        %>
				    </td>
				</tr>
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docType")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] docTypeField = ["jcrPath=/node/basis:docType", "options="+typeOptions, "onchange=false"];
				        uicomponent.addSelectBoxField("docType", docTypeField);
				        %>
				    </td>
				</tr>
				<tr style="display:none;">
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docRegistrationDate")%></td>
					<td class="FieldComponent">
						<%
						String[] docRegistrationDateField = ["jcrPath=/node/basis:docRegistrationDate", ("defaultValues="+todayS)];
						uicomponent.addCalendarField("docRegistrationDate", docRegistrationDateField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docDate")%></td>
					<td class="FieldComponent">
						<%
						String[] docDateField = ["jcrPath=/node/basis:docDate", "visible=true", "validate=datetime", ("defaultValues="+todayS)];
						uicomponent.addCalendarField("docDate", docDateField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docReference")%></td>
					<td class="FieldComponent">
						<%
						String[] docReferenceField = ["jcrPath=/node/basis:docReference"];
						uicomponent.addTextField("docReference", docReferenceField);
						%>
					</td>
				</tr>
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docKeywords")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] docKeywordsField = ["jcrPath=/node/basis:docKeywords", "options="+keywordsOptions, "multiValues=true", "onchange=false"];
				        uicomponent.addSelectBoxField("docKeywords", docKeywordsField);
				        %>
				    </td>
				</tr>
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docSenderType")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] docSenderTypeField = ["jcrPath=/node/basis:docSenderType", "options=intern,predefined extern,extern", "onchange=true"];
				        uicomponent.addSelectBoxField("docSenderType", docSenderTypeField);
				        %>
				    </td>
				</tr>
				<%
				UIFormSelectBox docSenderTypeSelectBox = uicomponent.findComponentById("docSenderType");
				if(docSenderTypeSelectBox.getValue().equals("intern")){
				%>
			    <tr>
			        <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docInternSender")%></td>
			        <td class="FieldComponent">
			          	<%
			          	 String[] docInternSenderField = ["jcrPath=/node/basis:docInternSender", "defaultValues=", "selectorIcon=ActionIcon Search16x16Icon","selectorClass=be.bull.spff.selector.UserSpffSelector", "options=null"];
			           	uicomponent.addActionField("docInternSender", docInternSenderField);
			          	%>
			        </td>
			    </tr>
			    <% } 
				else if(docSenderTypeSelectBox.getValue().equals("predefined extern")){
				%>	
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docPredefinedExternSender")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] docPredefinedExternSenderField = ["jcrPath=/node/basis:docPredefinedExternSender", "options="+predefinedExternSenderOptions, "onchange=false"];
				        uicomponent.addSelectBoxField("docPredefinedExternSender", docPredefinedExternSenderField);
				        %>
				    </td>
				</tr>	
				<%} else {%>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docExternSenderName")%></td>
					<td class="FieldComponent">
						<%
						String[] docExternSenderNameField = ["jcrPath=/node/basis:docExternSenderName"];
						uicomponent.addTextField("docExternSenderName", docExternSenderNameField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docExternSenderAdress")%></td>
					<td class="FieldComponent">
						<%
						String[] docExternSenderAdressField = ["jcrPath=/node/basis:docExternSenderAdress"];
						uicomponent.addTextAreaField("docExternSenderAdress", docExternSenderAdressField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docExternSenderZipCode")%></td>
					<td class="FieldComponent">
						<%
						String[] docExternSenderZipCodeField = ["jcrPath=/node/basis:docExternSenderZipCode"];
						uicomponent.addTextField("docExternSenderZipCode", docExternSenderZipCodeField);
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docExternSenderCity")%></td>
					<td class="FieldComponent">
						<%
						String[] docExternSenderCityField = ["jcrPath=/node/basis:docExternSenderCity"];
						uicomponent.addTextField("docExternSenderCity", docExternSenderCityField);
						%>
					</td>
				</tr>
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisDocument.label.docExternSenderCountry")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] docExternSenderCountryField = ["jcrPath=/node/basis:docExternSenderCountry",
				        "script=ecm-explorer/widget/FillSelectBoxWithTitles.groovy",
				        "scriptParams=Belgique,België,Afghanistan,Albania,American Samoa,Andorra," +
				        "Angola,Anguilla,Antarctica,Antigua & Barbuda,Argentina," +
				        "Armenia,Aruba,Ascension Island,Australia,Austria,Azerbaijan," +
				        "Bahamas,Bahrain,Bangladesh,Barbados,Belarus,Belize," +
				        "Benin,Bermuda,Bhutan,Bolivia,Bosnia/Herzegovina,Botswana," +
				        "Brazil,British Virgin Islands,Brunei,Bulgaria,Burkina Faso," +
				        "Burundi,Cambodia,Cameroon,Canada,Cape Verde Islands,Cayman Islands," +
				        "Central African Republic,Chad Republic,Chile,China,Christmas Island," +
				        "Cocos Keeling Island,Colombia,Comoros,Congo Democratic Republic," +
				        "Cook Islands,Costa Rica,Cote D'Ivoire,Croatia,Cuba,Cyprus,Czech Republic," +
				        "Denmark,Djibouti,Dominica,Dominican Republic,Ecuador,Egypt,El Salvador,Equatorial Guinea," +
				        "Eritrea,Estonia,Ethiopia,Falkland Islands,Faroe Island,Fiji Islands,Finland,France," +
				        "French Antilles/Martinique,French Guiana,French Polynesia,Gabon Republic,Gambia,Georgia," +
				        "Germany,Ghana,Gibraltar,Greece,Greenland,Grenada,Guadeloupe,Guam,Guatemala,Guinea Republic," +
				        "Guinea-Bissau,Guyana,Haiti,Honduras,Hong Kong,Hungary,Iceland,India,Indonesia,Iraq,Ireland," +
				        "Israel,Italy,Jamaica,Japan,Jordan,Kenya,Kiribati,Kosovo,Kuwait,Kyrgyzstan,Laos,Latvia,Lebanon," +
				        "Lesotho,Liberia,Libya,Liechtenstein,Lithuania,Luxembourg,Macau,Macedonia,Madagascar,Malawi," +
				        "Malaysia,Maldives,Mali Republic,Malta,Marshall Islands,Mauritania,Mauritius,Mexico,Micronesia," +
				        "Moldova,Monaco,Mongolia,Montenegro,Montserrat,Morocco,Mozambique,Myanmar (Burma),Namibia,Nauru," +
				        "Nepal,Netherlands,Netherlands Antilles,New Caledonia,New Zealand,Nicaragua,Niger Republic,Nigeria," +
				        "Niue Island,Norfolk,North Korea,Norway,Oman Dem Republic,Pakistan,Palau Republic,Palestine,Panama," +
				        "Papua New Guinea,Paraguay,Peru,Philippines,Poland,Portugal,Puerto Rico,Qatar,Reunion Island,Romania," +
				        "Russia,Rwanda Republic,Saipan/Mariannas,San Marino,Sao Tome/Principe,Saudi Arabia,Senegal,Serbia,Seychelles Island," +
				        "Sierra Leone,Singapore,Slovakia,Slovenia,Solomon Islands,Somalia Republic,Somoa,South Africa,South Korea," +
				        "Spain,Sri Lanka,St. Helena,St. Kitts,St. Lucia,St. Pierre,St. Vincent,Sudan,Suriname,Swaziland,Sweden," +
				        "Switzerland,Syria,Taiwan,Tajikistan,Tanzania,Thailand,Togo Republic,Tokelau,Tonga Islands,Trinidad & Tobago," +
				        "Tunisia,Turkey,Turkmenistan,Turks & Caicos Island,Tuvalu,Uganda,Ukraine,United Arab Emirates,United Kingdom," +
				        "Uruguay,USA/Canada,Uzbekistan,Vanuatu,Vatican City,Venezuela,Vietnam,Virgin Islands (US),Wallis/Futuna Islands," +
				        "Yemen Arab Republic,Zambia,Zimbabwe"];
				        uicomponent.addSelectBoxField("docExternSenderCountry", docExternSenderCountryField);
				        %>
				    </td>
				</tr>
			   <% } %>
			</table>
		</div>
		<div class="UITabContent" style="display: none;" >
			<table class="UIFormGrid">  
			   	<tr style="display:none;">
					<td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followSendDate")%></td>
					<td class="FieldComponent">
						<%
						String[] followSendDateField = ["jcrPath=/node/basis:followSendDate", ("defaultValues="+todayS)];
						uicomponent.addCalendarField("followSendDate", followSendDateField);
						%>
					</td>
				</tr>
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followEditorType")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] followEditorTypeField = ["jcrPath=/node/basis:followEditorType", "options=intern user, intern group, extern", "onchange=true"];
				        uicomponent.addSelectBoxField("followEditorType", followEditorTypeField);
				        %>
				    </td>
				</tr>
				<%
				UIFormSelectBox followEditorTypeSelectBox = uicomponent.findComponentById("followEditorType");
				if(followEditorTypeSelectBox.getValue().equals("intern user")){
				%>
			    <tr>
			        <td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followUserInternEditor")%></td>
			        <td class="FieldComponent">
			          	<%
			          	 String[] followUserInternEditorField = ["jcrPath=/node/basis:followUserInternEditor", "defaultValues=", "selectorIcon=ActionIcon Search16x16Icon","selectorClass=be.bull.spff.selector.UserSpffSelector", "options=null"];
			           	uicomponent.addActionField("followUserInternEditor", followUserInternEditorField);
			          	%>
			        </td>
			    </tr>
			    <% } 
				else if(followEditorTypeSelectBox.getValue().equals("intern group")){
				%>	
				<tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followGroupInternEditor")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] followGroupInternEditorField = ["jcrPath=/node/basis:followGroupInternEditor", "options="+groupInternEditorOptions, "onchange=false"];
				        uicomponent.addSelectBoxField("followGroupInternEditor", followGroupInternEditorField);
				        %>
				    </td>
				</tr>	
				<%} else {%>
			    <tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followExternEditor")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] followExternEditorField = ["jcrPath=/node/basis:followExternEditor", "options="+externEditorOptions, "onchange=false"];
				        uicomponent.addSelectBoxField("followExternEditor", followExternEditorField);
				        %>
				    </td>
				</tr>	
				<% } %>
			    <tr>
				    <td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followRequiredAction")%></td>
				    <td class="FieldComponent" colspan="6">
				        <%
				        String[] followRequiredActionField = ["jcrPath=/node/basis:followRequiredAction", "options="+requiredActionOptions, "onchange=false"];
				        uicomponent.addSelectBoxField("followRequiredAction", followRequiredActionField);
				        %>
				    </td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followComments")%></td>
					<td class="FieldComponent">
						<%
						String[] followCommentsField = ["jcrPath=/node/basis:followComments"];
						uicomponent.addTextAreaField("followComments", followCommentsField);;
						%>
					</td>
				</tr>
				<tr>
					<td class="FieldLabel"><%=_ctx.appRes("basisFollow.label.followAnswerByDate")%></td>
					<td class="FieldComponent">
						<%
						String[] followAnswerByDateField = ["jcrPath=/node/basis:followAnswerByDate", "visible=true", "validate=datetime", ("defaultValues="+todayS)];
						uicomponent.addCalendarField("followAnswerByDate", followAnswerByDateField);
						%>
					</td>
				</tr>				 																				
			</table>
		</div>
	</div>		
	<div class="UIAction"> 
					<table class="ActionContainer">
						<tr>
							<td>
						  <% for(action in uicomponent.getActions()) { 
								 String actionLabel = _ctx.appRes(uicomponent.getName() + ".action." + action);
								 String link = uicomponent.event(action);
								 if (!action.equals("Close")) {
								 link=link.replace("'", "\\'");
								  %>
								    <a href="javascript:checkFieldRNN('inputfolderRNN','folderRNN','$link')" class="ActionButton LightBlueStyle">
										<div class="ButtonLeft">
											<div class="ButtonRight">
												<div class="ButtonMiddle">
													$actionLabel
												</div>
											</div>
										</div>
									</a>
									
								<%} else {%>
									<div onclick="$link" class="ActionButton LightBlueStyle">
										<div class="ButtonLeft">
											<div class="ButtonRight">
												<div class="ButtonMiddle">
													<a href="javascript:void(0);">$actionLabel</a>
												</div>
											</div>
										</div>
									</div> 
								 <%}
							}%>          
						</td>
					  </tr>
					</table>
	</div>
    <%/*end render action*/%>    
</div>
<%uiform.end()%>
</div>  
<%/*End WorkingArea*/%>
</div>  
<%/*End TabPaneContent*/%>
</div>  
<%/*End UITabPane*/%>